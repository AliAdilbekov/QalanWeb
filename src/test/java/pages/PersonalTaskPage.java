package pages;

import com.codeborne.selenide.ElementsCollection;
import com.codeborne.selenide.SelenideElement;
import io.qameta.allure.Step;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;

import java.time.Duration;
import java.util.Random;

import static com.codeborne.selenide.Condition.*;
import static com.codeborne.selenide.Selenide.*;
import static io.restassured.RestAssured.given;

public class PersonalTaskPage {

    private final SelenideElement
            personalStudyStartButton = $(By.id("start-new-table-button")),
            personalStudyContinueButton = $(By.id("continue-last-table-button")),
            nextButton = $(By.id("next-task-button")),
            answerField = $x("//span[contains(@class,'mq-textarea')]/textarea"),
            answerContainer = $x("//span[contains(@class,'mq-editable-field')]"),
            checkAnswerButton = $(By.id("check-answer-button")),
            showSolutionButton = $(By.id("show-solution-button")),
            hideCalculatorButton = $(By.id("calculator-icon")),
            videoExplanationButton = $(By.id("video-explanation-button")),
            dotList = $(By.id("task-modal-dot-list")),
            congratulationsToast = $x("//div[contains(@class, 'Toastify__toast-body') and contains(.,'“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑')]");

    private Integer lastDotCount = null;
    private final Random random = new Random(); // —ç—Ç–æ –¥–ª—è —Ä–∞–∑–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
    private final By dotsContainer = By.id("task-modal-dot-list");
    private final By livesContainer = By.cssSelector(".task-attempt-list");


    @Step("–õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ —É—á–µ–Ω–∏–∫: {phone}")
    public PersonalTaskPage loginAsStudent(String phone, String password, String expectedUsername) {
        new LoginPage()
                .openLoginPage()
                .clickSignButton()
                .enterPhoneNumber(phone)
                .enterPassword(password)
                .clickSubmitButton()
                .verifySuccessfulLogin(expectedUsername);
        sleep(2000);
        return this;
    }

    @Step("–ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    public PersonalTaskPage startButtonClick() {
        personalStudyStartButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(2000);
        return this;
    }

    @Step("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    public void continueButtonClick() {
        personalStudyContinueButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(2000);
    }

    @Step("–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–¥—É—é—â–µ–µ")
    public PersonalTaskPage nextButtonClick() {
        nextButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(2000);
        return this;
    }

    @Step("–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç")
    public PersonalTaskPage showSolutionButtonClick() {
        showSolutionButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(2000);
        return this;
    }

    @Step("–ù–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ-–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ")
    public PersonalTaskPage videoExplanationButtonClick() {
        videoExplanationButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(2000);
        return this;
    }

    @Step("–°–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    public PersonalTaskPage hideCalculatorButtonClick() {
        hideCalculatorButton.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(1500);
        return this;
    }

    @Step("–ü–æ–¥—Å—á–µ—Ç –∑–∞–¥–∞—á –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    public PersonalTaskPage logTaskSummary() {
        int total = dotList.$$(By.cssSelector(".dot")).size();
        int solved = dotList.$$(By.cssSelector(".dot-success")).size();
        int errors = dotList.$$(By.cssSelector(".dot-error")).size();
        int shown = dotList.$$(By.cssSelector(".dot-show-solution")).size();
        int remaining = total - solved - errors - shown;
        System.out.printf("[TASKS] –í—Å–µ–≥–æ: %d; –†–µ—à–µ–Ω–æ: %d; –û—à–∏–±–æ–∫: %d; –ü–æ–∫–∞–∑–æ–≤ —Ä–µ—à–µ–Ω–∏—è: %d; –û—Å—Ç–∞–ª–æ—Å—å: %d%n",
                total, solved, errors, shown, remaining);
        lastDotCount = total;
        return this;
    }

    @Step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª-–≤–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–π: {expected}")
    public PersonalTaskPage verifyLifeCount(int expected) {
        // 1) –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∂–∏–∑–Ω–µ–π –ø–æ –∫–ª–∞—Å—Å—É
        SelenideElement container = $(livesContainer).shouldBe(visible, Duration.ofSeconds(5));

        // 2) –°—á–∏—Ç–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã .task-attempt-item –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ
        ElementsCollection lives = container.$$(".task-attempt-item");

        // 3) –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∫–ª–∞—Å—Å ‚Äúerror‚Äù (–ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ)
        int used = lives.filterBy(cssClass("error")).size();

        if (used != expected) {
            throw new AssertionError(
                    String.format("‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å %d –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –Ω–æ –Ω–∞–π–¥–µ–Ω–æ %d", expected, used)
            );
        }
        System.out.println("‚úÖ –ñ–∏–∑–Ω–µ–π –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: " + used);
        return this;
    }

    @Step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ —Ç–æ—á–µ–∫ –≤—ã—Ä–æ—Å–ª–æ –Ω–∞: {expectedIncrease}")
    public PersonalTaskPage verifyTaskCount(int expectedIncrease) {
        if (lastDotCount == null) {
            throw new IllegalStateException("–ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å logTaskSummary() –ø–µ—Ä–µ–¥ verifyTaskCount()");
        }
        int current = dotList.$$(By.cssSelector(".dot")).size();
        int delta = current - lastDotCount;
        if (delta != expectedIncrease) {
            throw new AssertionError(String.format(
                    "‚ùå –û–∂–∏–¥–∞–ª—Å—è –ø—Ä–∏—Ä–æ—Å—Ç —Ç–æ—á–µ–∫ –Ω–∞ %d, –Ω–æ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ %d (–±—ã–ª–æ %d, —Å—Ç–∞–ª–æ %d)",
                    expectedIncrease, delta, lastDotCount, current));
        }
        System.out.println("‚úÖ –¢–æ—á–µ–∫ –¥–æ–±–∞–≤–∏–ª–æ—Å—å: " + delta + " (—Å " + lastDotCount + " –¥–æ " + current + ")");
        lastDotCount = current;
        return this;
    }

    @Step("–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å API –¥–ª—è userId = {userId}")
    private String fetchAnswerFromApi(String userId) {
        var response = given()
                .baseUri("https://test.qalan.kz")
                .basePath("/api/mlRequest/pupilInfo")
                .queryParam("userId", userId)
                .relaxedHTTPSValidation()
                .when()
                .get();

        int statusCode = response.getStatusCode();

        if (statusCode != 200) {
            String responseBody = response.getBody().asPrettyString(); // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
            throw new AssertionError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–≤–µ—Ç–∞ —Å API!\n" +
                    "–°—Ç–∞—Ç—É—Å –∫–æ–¥: " + statusCode + "\n" +
                    "–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: " + responseBody);
        }
        String rawAnswer = response.jsonPath().getString("taskSolution.answer");
        return cleanAnswer(rawAnswer);
    }

    private String cleanAnswer(String rawAnswer) {
        if (rawAnswer == null) return "";
        return rawAnswer.replaceAll("[\\\\()]", "");
    }

    @Step("–í–≤–æ–¥–∏–º –≤ –ø–æ–ª–µ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´{value}¬ª")
    private void enterValue(String value) {
        answerContainer.shouldBe(visible, Duration.ofSeconds(10)).click();
        sleep(500);
        for (char ch : value.toCharArray()) {
            answerField.sendKeys(String.valueOf(ch));
            sleep(random.nextInt(100) + 80);
        }
    }

    @Step("–û—á–∏—â–∞–µ–º –ø–æ–ª–µ —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π BACKSPACE")
    public PersonalTaskPage clearAnswerField() {
        answerContainer.shouldBe(visible, Duration.ofSeconds(10)).click();
        answerField.sendKeys(Keys.END); // –∫—É—Ä—Å–æ—Ä –≤ –∫–æ–Ω–µ—Ü
        sleep(200);
        // –ñ–º–µ–º BACKSPACE
        for (int i = 0; i < 20; i++) {
            answerField.sendKeys(Keys.BACK_SPACE);
            sleep(80);
        }
        return this;
    }

    @Step("–†–µ—à–∞–µ–º –∑–∞–¥–∞—á–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–ø–∞–ø '“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑'")
    public void solveTasksUntilCongrats(String userId) {
        int taskCounter = 1;

        while (true) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Å—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–µ–π
            if (congratulationsToast.exists()) {
                System.out.println(" –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ø–∞–ø '“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑' –ø–µ—Ä–µ–¥ –∑–∞–¥–∞—á–µ–π #" + taskCounter);
                break;
            }

            String answer = fetchAnswerFromApi(userId);
            System.out.println("–û—Ç–≤–µ—Ç –¥–ª—è –∑–∞–¥–∞—á–∏ #" + taskCounter + ": " + answer);

            enterValue(answer);

            checkAnswerButton.shouldBe(enabled, Duration.ofSeconds(10)).click();
            sleep(5000);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (congratulationsToast.exists()) {
                System.out.println(" –£–°–ü–ï–®–ù–û! –ü–æ—è–≤–∏–ª—Å—è –ø–æ–ø–∞–ø '“ö“±—Ç—Ç—ã“õ—Ç–∞–π–º—ã–∑' –ø–æ—Å–ª–µ –∑–∞–¥–∞—á–∏ #" + taskCounter);
                break;
            }

            taskCounter++;
        }

    }

    @Step("–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ñ–ª–æ—É")
    public PersonalTaskPage checkPersonalStudyFlow(String userId) {
        if (personalStudyContinueButton.isDisplayed()) {
            System.out.println("üîÅ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ...");
            continueButtonClick();
            hideCalculatorButtonClick();
            logTaskSummary();
            solveTasksUntilCongrats(userId);
            sleep(1000);
            personalStudyStartButton.shouldBe(visible, Duration.ofSeconds(15));
            System.out.println("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å –Ω–æ–≤–æ–µ.");
        } else if (personalStudyStartButton.isDisplayed()) {
            System.out.println("üü¢ –û–±—É—á–µ–Ω–∏–µ –µ—â—ë –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–æ—Å—å. –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ñ–ª–æ—É (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É).");
        } else {
            throw new AssertionError("‚ùå –ö–Ω–æ–ø–∫–∏ '–ù–∞—á–∞—Ç—å' –∏–ª–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å UI.");
        }

        return this;
    }

    @Step("–î–µ–ª–∞–µ–º {errors} –æ—à–∏–±–æ—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫")
    public PersonalTaskPage makeErrors(int errors, String userId) {
        String correct = fetchAnswerFromApi(userId);
        for (int i = 1; i <= errors; i++) {
            // –≥–µ–Ω–µ—Ä–∏–º ¬´–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç 11‚Äì19
            String wrong = String.valueOf(11 + random.nextInt(9));
            System.out.printf("[ERROR #%d] –≤–º–µ—Å—Ç–æ \"%s\" –≤–≤–µ–ª–∏ \"%s\"%n", i, correct, wrong);

            clearAnswerField();
            enterValue(wrong);
            checkAnswerButton.shouldBe(enabled).click();
            sleep(1000);
        }
        return this;
    }

    @Step("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ iframe –ø–æ—è–≤–∏–ª—Å—è YouTube –ø–ª–µ–µ—Ä")
    public PersonalTaskPage checkVideoPlayer() {
        SelenideElement iframe = $("iframe[src*='youtube.com']");
        iframe.shouldBe(visible, Duration.ofSeconds(10));
        executeJavaScript("arguments[0].scrollIntoView({block: 'center', behavior: 'smooth'});", iframe);
        switchTo().frame(iframe);

        SelenideElement playButton = $(".ytp-large-play-button");
        playButton.shouldBe(visible, Duration.ofSeconds(10));
        System.out.println("‚úÖ YouTube –ø–ª–µ–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ iframe");

        switchTo().defaultContent();
        return this;
    }

}
