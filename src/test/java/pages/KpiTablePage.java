package pages;

import com.codeborne.selenide.Selenide;
import com.codeborne.selenide.SelenideElement;
import io.qameta.allure.Step;

import java.time.Duration;

import static com.codeborne.selenide.Condition.text;
import static com.codeborne.selenide.Condition.visible;
import static com.codeborne.selenide.Selenide.*;


public class KpiTablePage {

    private final SelenideElement
        serviceChapter = $x("/html/body/div[2]/div[1]/div/div[1]/div/div/div/div[2]/nav/div[1]/div[4]/span"),
        kpiButton = $x("/html/body/div[2]/div[1]/div/div[1]/div/div/div/div[2]/div/main/div[1]/div[1]"),
        personalStudyKpi = $x("/html/body/div[2]/div[1]/div/div[1]/div/div/div/div[2]/div/main/div[3]/div[1]/div[1]"),
        companyInput = $("#select-company"),
        dateInput = $("#date-picker");

    @Step("–õ–æ–≥–∏–Ω–∏–º—Å—è –∫–∞–∫ —Å–µ—Ä–≤–∏—Å-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {phone}")
    public KpiTablePage loginAsService(String phone, String password, String expectedUsername) {
        new LoginPage()
                .openLoginPage()
                .clickSignButton()
                .enterPhoneNumber(phone)
                .enterPassword(password)
                .clickSubmitButton()
                .verifySuccessfulLogin(expectedUsername);
        return this;
    }

    @Step("–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ä–∞–∑–¥–µ–ª —Å–µ—Ä–≤–∏—Å")
    public KpiTablePage clickServiceChapter() {
        try {
            serviceChapter.shouldBe(visible, Duration.ofSeconds(10)).click();
            sleep(2000);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ —Ä–∞–∑–¥–µ–ª '–°–µ—Ä–≤–∏—Å': " + e.getMessage());
        }
        return this;
    }

    @Step("–ù–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    public KpiTablePage clickKpiButton() {
        try {
            kpiButton.shouldBe(visible, Duration.ofSeconds(10)).click();
            sleep(2000);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': " + e.getMessage());
        }
        return this;
    }

    @Step("–í—ã–±–∏—Ä–∞–µ–º –º–æ–¥—É–ª—å –ü–µ—Ä—Å–æ–Ω–∞–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ KPI")
    public KpiTablePage clickPersonalStudyKpi() {
        try {
            personalStudyKpi.shouldBe(visible, Duration.ofSeconds(10)).click();
            sleep(2000);
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å '–ü–µ—Ä—Å–æ–Ω–∞–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ KPI': " + e.getMessage());
        }
        return this;
    }

    @Step("–í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: {companyName} –∏ –∂–º–µ–º Enter")
    public KpiTablePage typeCompanyNameAndSelect(String companyName) {
        try {
            companyInput.shouldBe(visible, Duration.ofSeconds(10))
                    .setValue(companyName)
                    .pressEnter();
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–ø–∞–Ω–∏—é: " + companyName + " ‚Äî " + e.getMessage());
        }
        return this;
    }

    @Step("–í–≤–æ–¥–∏–º –¥–∞—Ç—É: {date} –∏ –∂–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã")
    public KpiTablePage enterDate(String date) {
        try {
            dateInput.shouldBe(visible, Duration.ofSeconds(10)).setValue(date).pressEnter();
            $("#kpi-td-date").shouldBe(visible, Duration.ofSeconds(10)).shouldHave(text(date));
        } catch (Exception e) {
            throw new RuntimeException("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∏–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å: " + e.getMessage());
        }
        return this;
    }


    @Step("–ü—Ä–æ–≤–µ—Ä—è–µ–º KPI-–¥–∞–Ω–Ω—ã–µ —Å –ª–æ–≥–æ–º")
    public KpiTablePage verifyKpiRowDataWithLogs(
            String expectedDate,
            String expectedGraduates,
            String expectedSubscribers,
            String expectedKpi,
            String expectedFreezings,
            String expectedFreezingPercent) {

        String actualDate = $("#kpi-td-date").shouldBe(visible).getText();
        String actualGraduates = $("#kpi-td-graduates").shouldBe(visible).getText();
        String actualSubscribers = $("#kpi-td-subscribers").shouldBe(visible).getText();
        String actualKpi = $("#kpi-td-kpi").shouldBe(visible).getText();
        String actualFreezings = $("#kpi-td-freezings").shouldBe(visible).getText();
        String actualFreezingPercent = $("#kpi-td-freezing-percent").shouldBe(visible).getText();

        System.out.println("üîç [KPI DATA]");
        System.out.println("–î–∞—Ç–∞:         –æ–∂–∏–¥–∞–µ–º '" + expectedDate + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualDate + "'");
        System.out.println("–í—ã–ø–æ–ª–Ω–∏–ª–∏:    –æ–∂–∏–¥–∞–µ–º '" + expectedGraduates + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualGraduates + "'");
        System.out.println("–ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å:  –æ–∂–∏–¥–∞–µ–º '" + expectedSubscribers + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualSubscribers + "'");
        System.out.println("KPI:          –æ–∂–∏–¥–∞–µ–º '" + expectedKpi + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualKpi + "'");
        System.out.println("–ó–∞–º–æ—Ä–æ–∑–∫–∏:    –æ–∂–∏–¥–∞–µ–º '" + expectedFreezings + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualFreezings + "'");
        System.out.println("–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–º.: –æ–∂–∏–¥–∞–µ–º '" + expectedFreezingPercent + "' | –Ω–∞–π–¥–µ–Ω–æ '" + actualFreezingPercent + "'");

        // –°—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π –ø—Ä–∏ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–∏
        assert actualDate.equals(expectedDate) : "‚ùå –î–∞—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
        assert actualGraduates.equals(expectedGraduates) : "‚ùå –ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
        assert actualSubscribers.equals(expectedSubscribers) : "‚ùå –ö–æ–ª-–≤–æ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
        assert actualKpi.equals(expectedKpi) : "‚ùå KPI –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";
        assert actualFreezings.equals(expectedFreezings) : "‚ùå –ó–∞–º–æ—Ä–æ–∑–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!";
        assert actualFreezingPercent.equals(expectedFreezingPercent) : "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!";

        System.out.println("‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç");
        return this;
    }

}
